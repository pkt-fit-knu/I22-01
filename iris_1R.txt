using System;
using System.Collections.Generic;
using System.Data;

namespace iris_1R
{
    public enum IrisClass { Setosa, Versicolor, Virginica }

    class Program
    {
        static void Main(string[] args)
        {
            DataTable table = new DataTable();

            table.Columns.Add("SepalLength", typeof(double));
            table.Columns.Add("SepalWidth", typeof(double));
            table.Columns.Add("PetalLength", typeof(double));
            table.Columns.Add("PetalWidth", typeof(double));
            table.Columns.Add("IrisClass", typeof(IrisClass));

            #region Irises

            #region IrisesSetosa

            table.Rows.Add(5.1, 3.5, 1.4, 0.2, IrisClass.Setosa);
            table.Rows.Add(4.9, 3.0, 1.4, 0.2, IrisClass.Setosa);
            table.Rows.Add(4.7, 3.2, 1.3, 0.2, IrisClass.Setosa);
            table.Rows.Add(4.6, 3.1, 1.5, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.0, 3.6, 1.4, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.4, 3.9, 1.7, 0.4, IrisClass.Setosa);
            table.Rows.Add(4.6, 3.4, 1.4, 0.3, IrisClass.Setosa);
            table.Rows.Add(5.0, 3.4, 1.5, 0.2, IrisClass.Setosa);
            table.Rows.Add(4.4, 2.9, 1.4, 0.2, IrisClass.Setosa);
            table.Rows.Add(4.9, 3.1, 1.5, 0.1, IrisClass.Setosa);
            table.Rows.Add(5.4, 3.7, 1.5, 0.2, IrisClass.Setosa);
            table.Rows.Add(4.8, 3.4, 1.6, 0.2, IrisClass.Setosa);
            table.Rows.Add(4.8, 3.0, 1.4, 0.1, IrisClass.Setosa);
            table.Rows.Add(4.3, 3.0, 1.1, 0.1, IrisClass.Setosa);
            table.Rows.Add(5.8, 4.0, 1.2, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.7, 4.4, 1.5, 0.4, IrisClass.Setosa);
            table.Rows.Add(5.4, 3.9, 1.3, 0.4, IrisClass.Setosa);
            table.Rows.Add(5.1, 3.5, 1.4, 0.3, IrisClass.Setosa);
            table.Rows.Add(5.7, 3.8, 1.7, 0.3, IrisClass.Setosa);
            table.Rows.Add(5.1, 3.8, 1.5, 0.3, IrisClass.Setosa);
            table.Rows.Add(5.4, 3.4, 1.7, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.1, 3.7, 1.5, 0.4, IrisClass.Setosa);
            table.Rows.Add(4.6, 3.6, 1.0, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.1, 3.3, 1.7, 0.5, IrisClass.Setosa);
            table.Rows.Add(4.8, 3.4, 1.9, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.0, 3.0, 1.6, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.0, 3.4, 1.6, 0.4, IrisClass.Setosa);
            table.Rows.Add(5.2, 3.5, 1.5, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.2, 3.4, 1.4, 0.2, IrisClass.Setosa);
            table.Rows.Add(4.7, 3.2, 1.6, 0.2, IrisClass.Setosa);
            table.Rows.Add(4.8, 3.1, 1.6, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.4, 3.4, 1.5, 0.4, IrisClass.Setosa);
            table.Rows.Add(5.2, 4.1, 1.5, 0.1, IrisClass.Setosa);
            table.Rows.Add(5.5, 4.2, 1.4, 0.2, IrisClass.Setosa);
            table.Rows.Add(4.9, 3.1, 1.5, 0.1, IrisClass.Setosa);
            table.Rows.Add(5.0, 3.2, 1.2, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.5, 3.5, 1.3, 0.2, IrisClass.Setosa);
            table.Rows.Add(4.9, 3.1, 1.5, 0.1, IrisClass.Setosa);
            table.Rows.Add(4.4, 3.0, 1.3, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.1, 3.4, 1.5, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.0, 3.5, 1.3, 0.3, IrisClass.Setosa);
            table.Rows.Add(4.5, 2.3, 1.3, 0.3, IrisClass.Setosa);
            table.Rows.Add(4.4, 3.2, 1.3, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.0, 3.5, 1.6, 0.6, IrisClass.Setosa);
            table.Rows.Add(5.1, 3.8, 1.9, 0.4, IrisClass.Setosa);
            table.Rows.Add(4.8, 3.0, 1.4, 0.3, IrisClass.Setosa);
            table.Rows.Add(5.1, 3.8, 1.6, 0.2, IrisClass.Setosa);
            table.Rows.Add(4.6, 3.2, 1.4, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.3, 3.7, 1.5, 0.2, IrisClass.Setosa);
            table.Rows.Add(5.0, 3.3, 1.4, 0.2, IrisClass.Setosa);

            #endregion

            #region IrisesVersicolor

            table.Rows.Add(7.0, 3.2, 4.7, 1.4, IrisClass.Versicolor);
            table.Rows.Add(6.4, 3.2, 4.5, 1.5, IrisClass.Versicolor);
            table.Rows.Add(6.9, 3.1, 4.9, 1.5, IrisClass.Versicolor);
            table.Rows.Add(5.5, 2.3, 4.0, 1.3, IrisClass.Versicolor);
            table.Rows.Add(6.5, 2.8, 4.6, 1.5, IrisClass.Versicolor);
            table.Rows.Add(5.7, 2.8, 4.5, 1.3, IrisClass.Versicolor);
            table.Rows.Add(6.3, 3.3, 4.7, 1.6, IrisClass.Versicolor);
            table.Rows.Add(4.9, 2.4, 3.3, 1.0, IrisClass.Versicolor);
            table.Rows.Add(6.6, 2.9, 4.6, 1.3, IrisClass.Versicolor);
            table.Rows.Add(5.2, 2.7, 3.9, 1.4, IrisClass.Versicolor);
            table.Rows.Add(5.0, 2.0, 3.5, 1.0, IrisClass.Versicolor);
            table.Rows.Add(5.9, 3.0, 4.2, 1.5, IrisClass.Versicolor);
            table.Rows.Add(6.0, 2.2, 4.0, 1.0, IrisClass.Versicolor);
            table.Rows.Add(6.1, 2.9, 4.7, 1.4, IrisClass.Versicolor);
            table.Rows.Add(5.6, 2.9, 3.6, 1.3, IrisClass.Versicolor);
            table.Rows.Add(6.7, 3.1, 4.4, 1.4, IrisClass.Versicolor);
            table.Rows.Add(5.6, 3.0, 4.5, 1.5, IrisClass.Versicolor);
            table.Rows.Add(5.8, 2.7, 4.1, 1.0, IrisClass.Versicolor);
            table.Rows.Add(6.2, 2.2, 4.5, 1.5, IrisClass.Versicolor);
            table.Rows.Add(5.6, 2.5, 3.9, 1.1, IrisClass.Versicolor);
            table.Rows.Add(5.9, 3.2, 4.8, 1.8, IrisClass.Versicolor);
            table.Rows.Add(6.1, 2.8, 4.0, 1.3, IrisClass.Versicolor);
            table.Rows.Add(6.3, 2.5, 4.9, 1.5, IrisClass.Versicolor);
            table.Rows.Add(6.1, 2.8, 4.7, 1.2, IrisClass.Versicolor);
            table.Rows.Add(6.4, 2.9, 4.3, 1.3, IrisClass.Versicolor);
            table.Rows.Add(6.6, 3.0, 4.4, 1.4, IrisClass.Versicolor);
            table.Rows.Add(6.8, 2.8, 4.8, 1.4, IrisClass.Versicolor);
            table.Rows.Add(6.7, 3.0, 5.0, 1.7, IrisClass.Versicolor);
            table.Rows.Add(6.0, 2.9, 4.5, 1.5, IrisClass.Versicolor);
            table.Rows.Add(5.7, 2.6, 3.5, 1.0, IrisClass.Versicolor);
            table.Rows.Add(5.5, 2.4, 3.8, 1.1, IrisClass.Versicolor);
            table.Rows.Add(5.5, 2.4, 3.7, 1.0, IrisClass.Versicolor);
            table.Rows.Add(5.8, 2.7, 3.9, 1.2, IrisClass.Versicolor);
            table.Rows.Add(6.0, 2.7, 5.1, 1.6, IrisClass.Versicolor);
            table.Rows.Add(5.4, 3.0, 4.5, 1.5, IrisClass.Versicolor);
            table.Rows.Add(6.0, 3.4, 4.5, 1.6, IrisClass.Versicolor);
            table.Rows.Add(6.7, 3.1, 4.7, 1.5, IrisClass.Versicolor);
            table.Rows.Add(6.3, 2.3, 4.4, 1.3, IrisClass.Versicolor);
            table.Rows.Add(5.6, 3.0, 4.1, 1.3, IrisClass.Versicolor);
            table.Rows.Add(5.5, 2.5, 4.0, 1.3, IrisClass.Versicolor);
            table.Rows.Add(5.5, 2.6, 4.4, 1.2, IrisClass.Versicolor);
            table.Rows.Add(6.1, 3.0, 4.6, 1.4, IrisClass.Versicolor);
            table.Rows.Add(5.8, 2.6, 4.0, 1.2, IrisClass.Versicolor);
            table.Rows.Add(5.0, 2.3, 3.3, 1.0, IrisClass.Versicolor);
            table.Rows.Add(5.6, 2.7, 4.2, 1.3, IrisClass.Versicolor);
            table.Rows.Add(5.7, 3.0, 4.2, 1.2, IrisClass.Versicolor);
            table.Rows.Add(5.7, 2.9, 4.2, 1.3, IrisClass.Versicolor);
            table.Rows.Add(6.2, 2.9, 4.3, 1.3, IrisClass.Versicolor);
            table.Rows.Add(5.1, 2.5, 3.0, 1.1, IrisClass.Versicolor);
            table.Rows.Add(5.7, 2.8, 4.1, 1.3, IrisClass.Versicolor);

            #endregion

            #region IrisesVirginica

            table.Rows.Add(6.3, 3.3, 6.0, 2.5, IrisClass.Virginica);
            table.Rows.Add(5.8, 2.7, 5.1, 1.9, IrisClass.Virginica);
            table.Rows.Add(7.1, 3.0, 5.9, 2.1, IrisClass.Virginica);
            table.Rows.Add(6.3, 2.9, 5.6, 1.8, IrisClass.Virginica);
            table.Rows.Add(6.5, 3.0, 5.8, 2.2, IrisClass.Virginica);
            table.Rows.Add(7.6, 3.0, 6.6, 2.1, IrisClass.Virginica);
            table.Rows.Add(4.9, 2.5, 4.5, 1.7, IrisClass.Virginica);
            table.Rows.Add(7.3, 2.9, 6.3, 1.8, IrisClass.Virginica);
            table.Rows.Add(6.7, 2.5, 5.8, 1.8, IrisClass.Virginica);
            table.Rows.Add(7.2, 3.6, 6.1, 2.5, IrisClass.Virginica);
            table.Rows.Add(6.5, 3.2, 5.1, 2.0, IrisClass.Virginica);
            table.Rows.Add(6.4, 2.7, 5.3, 1.9, IrisClass.Virginica);
            table.Rows.Add(6.8, 3.0, 5.5, 2.1, IrisClass.Virginica);
            table.Rows.Add(5.7, 2.5, 5.0, 2.0, IrisClass.Virginica);
            table.Rows.Add(5.8, 2.8, 5.1, 2.4, IrisClass.Virginica);
            table.Rows.Add(6.4, 3.2, 5.3, 2.3, IrisClass.Virginica);
            table.Rows.Add(6.5, 3.0, 5.5, 1.8, IrisClass.Virginica);
            table.Rows.Add(7.7, 3.8, 6.7, 2.2, IrisClass.Virginica);
            table.Rows.Add(7.7, 2.6, 6.9, 2.3, IrisClass.Virginica);
            table.Rows.Add(6.0, 2.2, 5.0, 1.5, IrisClass.Virginica);
            table.Rows.Add(6.9, 3.2, 5.7, 2.3, IrisClass.Virginica);
            table.Rows.Add(5.6, 2.8, 4.9, 2.0, IrisClass.Virginica);
            table.Rows.Add(7.7, 2.8, 6.7, 2.0, IrisClass.Virginica);
            table.Rows.Add(6.3, 2.7, 4.9, 1.8, IrisClass.Virginica);
            table.Rows.Add(6.7, 3.3, 5.7, 2.1, IrisClass.Virginica);
            table.Rows.Add(7.2, 3.2, 6.0, 1.8, IrisClass.Virginica);
            table.Rows.Add(6.2, 2.8, 4.8, 1.8, IrisClass.Virginica);
            table.Rows.Add(6.1, 3.0, 4.9, 1.8, IrisClass.Virginica);
            table.Rows.Add(6.4, 2.8, 5.6, 2.1, IrisClass.Virginica);
            table.Rows.Add(7.2, 3.0, 5.8, 1.6, IrisClass.Virginica);
            table.Rows.Add(7.4, 2.8, 6.1, 1.9, IrisClass.Virginica);
            table.Rows.Add(7.9, 3.8, 6.4, 2.0, IrisClass.Virginica);
            table.Rows.Add(6.4, 2.8, 5.6, 2.2, IrisClass.Virginica);
            table.Rows.Add(6.3, 2.8, 5.1, 1.5, IrisClass.Virginica);
            table.Rows.Add(6.1, 2.6, 5.6, 1.4, IrisClass.Virginica);
            table.Rows.Add(7.7, 3.0, 6.1, 2.3, IrisClass.Virginica);
            table.Rows.Add(6.3, 3.4, 5.6, 2.4, IrisClass.Virginica);
            table.Rows.Add(6.4, 3.1, 5.5, 1.8, IrisClass.Virginica);
            table.Rows.Add(6.0, 3.0, 4.8, 1.8, IrisClass.Virginica);
            table.Rows.Add(6.9, 3.1, 5.4, 2.1, IrisClass.Virginica);
            table.Rows.Add(6.7, 3.1, 5.6, 2.4, IrisClass.Virginica);
            table.Rows.Add(6.9, 3.1, 5.1, 2.3, IrisClass.Virginica);
            table.Rows.Add(5.8, 2.7, 5.1, 1.9, IrisClass.Virginica);
            table.Rows.Add(6.8, 3.2, 5.9, 2.3, IrisClass.Virginica);
            table.Rows.Add(6.7, 3.3, 5.7, 2.5, IrisClass.Virginica);
            table.Rows.Add(6.7, 3.0, 5.2, 2.3, IrisClass.Virginica);
            table.Rows.Add(6.3, 2.5, 5.0, 1.9, IrisClass.Virginica);
            table.Rows.Add(6.5, 3.0, 5.2, 2.0, IrisClass.Virginica);
            table.Rows.Add(6.2, 3.4, 5.4, 2.3, IrisClass.Virginica);
            table.Rows.Add(5.9, 3.0, 5.1, 1.8, IrisClass.Virginica);

            #endregion

            #endregion

            int firstItem = 2;
            int b = 2;

            Group generalGroup = new Group(table);

            for (int i = 0; i < table.Columns.Count - 1; i++)
            {
                table.DefaultView.Sort = table.Columns[i].Caption;
                table = table.DefaultView.ToTable();

                Group attributeGroup = new Group();
                generalGroup.ChildGroups.Add(attributeGroup);

                for (int j = 0; j < table.Rows.Count; j++)
                {
                    switch (table.Rows[j].Field<IrisClass>("IrisClass"))
                    {
                        case IrisClass.Setosa:
                            {
                                attributeGroup.SetosaAmount++;
                                break;
                            }
                        case IrisClass.Versicolor:
                            {
                                attributeGroup.VersicolorAmount++;
                                break;
                            }
                        case IrisClass.Virginica:
                            {
                                attributeGroup.VirginicaAmount++;
                                break;
                            }
                    }

                    if (attributeGroup.SetosaAmount >= b && (j == table.Rows.Count - 1 || table.Rows[j + 1].Field<IrisClass>("IrisClass") != IrisClass.Setosa))
                    {
                        DataTable group = new DataTable();

                        group.Columns.Add("IrisClass", typeof(IrisClass));
                        group.Columns.Add(table.Columns[i].Caption, typeof(double));

                        for (int k = firstItem; k < j + 1; k++)
                        {
                            group.Rows.Add(table.Rows[k].Field<IrisClass>("IrisClass"), table.Rows[k].Field<double>(table.Columns[i].Caption));
                        }

                        attributeGroup.ChildGroups.Add(new Group(group, table.Rows[firstItem].Field<double>(table.Columns[i].Caption), table.Rows[j].Field<double>(table.Columns[i].Caption)));

                        firstItem = j + 1;

                        attributeGroup.SetosaAmount = 0;
                        attributeGroup.VersicolorAmount = 0;
                        attributeGroup.VirginicaAmount = 0;
                    }
                    else if (attributeGroup.VersicolorAmount >= b && (j == table.Rows.Count - 1 || table.Rows[j + 1].Field<IrisClass>("IrisClass") != IrisClass.Versicolor))
                    {
                        DataTable group = new DataTable();

                        group.Columns.Add("IrisClass", typeof(IrisClass));
                        group.Columns.Add(table.Columns[i].Caption, typeof(double));

                        for (int k = firstItem; k < j + 1; k++)
                        {
                            group.Rows.Add(table.Rows[k].Field<IrisClass>("IrisClass"), table.Rows[k].Field<double>(table.Columns[i].Caption));
                        }

                        attributeGroup.ChildGroups.Add(new Group(group, table.Rows[firstItem].Field<double>(table.Columns[i].Caption), table.Rows[j].Field<double>(table.Columns[i].Caption)));

                        firstItem = j + 1;

                        attributeGroup.SetosaAmount = 0;
                        attributeGroup.VersicolorAmount = 0;
                        attributeGroup.VirginicaAmount = 0;
                    }
                    else if (attributeGroup.VirginicaAmount >= b && (j == table.Rows.Count - 1 || table.Rows[j + 1].Field<IrisClass>("IrisClass") != IrisClass.Virginica))
                    {
                        DataTable group = new DataTable();

                        group.Columns.Add("IrisClass", typeof(IrisClass));
                        group.Columns.Add(table.Columns[i].Caption, typeof(double));

                        for (int k = firstItem; k < j + 1; k++)
                        {
                            group.Rows.Add(table.Rows[k].Field<IrisClass>("IrisClass"), table.Rows[k].Field<double>(table.Columns[i].Caption));
                        }

                        attributeGroup.ChildGroups.Add(new Group(group, table.Rows[firstItem].Field<double>(table.Columns[i].Caption), table.Rows[j].Field<double>(table.Columns[i].Caption)));

                        firstItem = j + 1;

                        attributeGroup.SetosaAmount = 0;
                        attributeGroup.VersicolorAmount = 0;
                        attributeGroup.VirginicaAmount = 0;
                    }

                    if (j == table.Rows.Count - 1 && firstItem != table.Rows.Count)
                    {
                        DataTable group = new DataTable();

                        group.Columns.Add("IrisClass", typeof(IrisClass));
                        group.Columns.Add(table.Columns[i].Caption, typeof(double));

                        for (int k = firstItem; k < table.Rows.Count; k++)
                        {
                            group.Rows.Add(table.Rows[k].Field<IrisClass>("IrisClass"), table.Rows[k].Field<double>(table.Columns[i].Caption));
                        }

                        attributeGroup.ChildGroups.Add(new Group(group, table.Rows[firstItem].Field<double>(table.Columns[i].Caption), table.Rows[j].Field<double>(table.Columns[i].Caption)));

                        firstItem = j + 1;

                        attributeGroup.SetosaAmount = 0;
                        attributeGroup.VersicolorAmount = 0;
                        attributeGroup.VirginicaAmount = 0;
                    }
                }

                foreach (Group group in attributeGroup.ChildGroups)
                {
                    foreach (DataRow row in group.DataTable.Rows)
                    {
                        if (row.Field<IrisClass>("IrisClass") == IrisClass.Setosa)
                        {
                            group.SetosaAmount++;
                        }
                        else if (row.Field<IrisClass>("IrisClass") == IrisClass.Versicolor)
                        {
                            group.VersicolorAmount++;
                        }
                        else if (row.Field<IrisClass>("IrisClass") == IrisClass.Virginica)
                        {
                            group.VirginicaAmount++;
                        }
                    }

                    if (group.VersicolorAmount >= group.SetosaAmount && group.VersicolorAmount >= group.VirginicaAmount)
                    {
                        group.ChosenClass = IrisClass.Versicolor;
                        group.MistakesAmount = group.SetosaAmount + group.VirginicaAmount;
                    }
                    else if (group.VirginicaAmount >= group.SetosaAmount && group.VirginicaAmount >= group.VersicolorAmount)
                    {
                        group.ChosenClass = IrisClass.Virginica;
                        group.MistakesAmount = group.SetosaAmount + group.VersicolorAmount;
                    }
                    else if (group.SetosaAmount >= group.VersicolorAmount && group.SetosaAmount >= group.VirginicaAmount)
                    {
                        group.ChosenClass = IrisClass.Setosa;
                        group.MistakesAmount = group.VersicolorAmount + group.VirginicaAmount;
                    }

                   // Console.WriteLine(group.MistakesAmount);

                    attributeGroup.MistakesAmount += group.MistakesAmount;
                }

                Console.WriteLine("   " + attributeGroup.MistakesAmount);

                firstItem = 0;
            }

            Group choosenGroup = new Group();
            choosenGroup.MistakesAmount = Int32.MaxValue;

            foreach (Group group in generalGroup.ChildGroups)
            {
                if (group.MistakesAmount < choosenGroup.MistakesAmount)
                {
                    choosenGroup = group;
                }
            }

            //Console.WriteLine("      " + choosenGroup.MistakesAmount + Environment.NewLine);

            foreach (DataRow iris in generalGroup.DataTable.Rows)
            {
                foreach (Group group in choosenGroup.ChildGroups)
                {
                    if (iris.Field<double>(group.DataTable.Columns[1].Caption) >= group.MinBorder && iris.Field<double>(group.DataTable.Columns[1].Caption) <= group.MaxBorder)
                    {
                        Console.WriteLine((generalGroup.DataTable.Rows.IndexOf(iris) + 1) + " | " +
                                           iris.Field<double>("SepalLength") + " | " +
                                           iris.Field<double>("SepalWidth") + " | " +
                                           iris.Field<double>("PetalLength") + " | " +
                                           iris.Field<double>("PetalWidth") + " | " +
                                           group.ChosenClass);

                        break;
                    }
                }
            }

            Console.ReadKey();
        }
    }

    class Group
    {
        public List<Group> ChildGroups { get; set; }

        public DataTable DataTable { get; set; }

        public double MinBorder { get; set; }
        public double MaxBorder { get; set; }

        public int SetosaAmount { get; set; }
        public int VersicolorAmount { get; set; }
        public int VirginicaAmount { get; set; }

        public IrisClass ChosenClass { get; set; }

        public int MistakesAmount { get; set; }

        public Group()
        {
            this.ChildGroups = new List<Group>();
        }

        public Group(DataTable dataTable)
        {
            this.DataTable = dataTable;
            this.ChildGroups = new List<Group>();
        }

        public Group(DataTable dataTable, double minBorder, double maxBorder)
        {
            this.DataTable = dataTable;

            this.MinBorder = minBorder;
            this.MaxBorder = maxBorder;
        }
    }
}